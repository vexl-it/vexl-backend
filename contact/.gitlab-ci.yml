# DinD service is required for Testcontainers
services:
  - name: docker:dind
    # entrypoint: [ "env", "-u", "DOCKER_HOST" ]
    # command: [ "dockerd-entrypoint.sh" ]
    # explicitly disable tls to avoid docker startup interruption
    command: ["--tls=false"]

variables:
  # Instruct Testcontainers to use the daemon of DinD.
  DOCKER_HOST: tcp://docker:2375
  # Instruct Docker not to start over TLS.
  DOCKER_TLS_CERTDIR: ""
  # Improve performance with overlays.
  DOCKER_DRIVER: overlay2
  ROLLOUT_RESOURCE_TYPE: deployment

stages:
  - test
  - coverage
  - artifacts
  - build
  - deploy

test:
  image: maven:3-openjdk-17
  tags:
    - dind
  services:
    - docker:18.09.7-dind
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_DRIVER: overlay2
  stage: test
  script: ./mvnw org.jacoco:jacoco-maven-plugin:prepare-agent test jacoco:report
  before_script:
    - chmod +x mvnw
  interruptible: true
  artifacts:
    when: always
    paths:
      - target/site/jacoco/jacoco.xml
    reports:
      junit:
        - target/surefire-reports/TEST-*.xml

coverage-test:
  stage: coverage
  image: registry.gitlab.com/haynes/jacoco2cobertura:1.0.7
  script:
    - python /opt/cover2cover.py target/site/jacoco/jacoco.xml $CI_PROJECT_DIR/src/main/java/ > target/site/cobertura.xml
  needs: ["test"]
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: target/site/cobertura.xml
  only:
    refs:
      - branches
  except:
    - master
    - devel
    - staging
    - production

artifacts:
  image: maven:3-openjdk-17
  stage: artifacts
  artifacts:
    untracked: false
    expire_in: 1 hour
    paths:
      - target/vexl-0.0.1-SNAPSHOT.jar
  script:
    - mvn package -Dmaven.test.skip
  only:
    - devel
    - staging
    - production

build-dev:
  image: docker:18.09.7
  services:
    - docker:18.09.7-dind
  stage: build
  dependencies:
    - artifacts
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - >
      docker build
      --pull
      --build-arg http_proxy=$http_proxy
      --build-arg https_proxy=$https_proxy
      --build-arg no_proxy=$no_proxy
      --build-arg CI_PROJECT_NAME=$CI_PROJECT_NAME
      --build-arg CI_COMMIT_SHORT_SHA=$CI_COMMIT_SHORT_SHA
      --build-arg KUBE_DOMAIN=cleevio.io
      --build-arg PROFILE=dev
      --cache-from $CI_REGISTRY_IMAGE:LATEST
      --tag ${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG}:${CI_APPLICATION_TAG:-$CI_COMMIT_SHA}
      --tag ${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG}:latest
      .
    - docker push ${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG}:${CI_APPLICATION_TAG:-$CI_COMMIT_SHA}
    - docker push ${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG}:latest
  only:
    refs:
      - devel
  interruptible: true

build-staging:
  image: docker:18.09.7
  services:
    - docker:18.09.7-dind
  stage: build
  dependencies:
    - artifacts
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - >
      docker build
      --pull
      --build-arg http_proxy=$http_proxy
      --build-arg https_proxy=$https_proxy
      --build-arg no_proxy=$no_proxy
      --build-arg CI_PROJECT_NAME=$CI_PROJECT_NAME
      --build-arg CI_COMMIT_SHORT_SHA=$CI_COMMIT_SHORT_SHA
      --build-arg KUBE_DOMAIN=cleevio.io
      --build-arg PROFILE=stage
      --cache-from $CI_REGISTRY_IMAGE:LATEST
      --tag ${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG}:${CI_APPLICATION_TAG:-$CI_COMMIT_SHA}
      --tag ${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG}:latest
      .
    - docker push ${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG}:${CI_APPLICATION_TAG:-$CI_COMMIT_SHA}
    - docker push ${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG}:latest
  only:
    refs:
      - staging
  interruptible: true

build-production:
  image: docker:18.09.7
  services:
    - docker:18.09.7-dind
  stage: build
  dependencies:
    - artifacts
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - >
      docker build
      --pull
      --build-arg http_proxy=$http_proxy
      --build-arg https_proxy=$https_proxy
      --build-arg no_proxy=$no_proxy
      --build-arg CI_PROJECT_NAME=$CI_PROJECT_NAME
      --build-arg CI_COMMIT_SHORT_SHA=$CI_COMMIT_SHORT_SHA
      --build-arg KUBE_DOMAIN=cleevio.io
      --build-arg PROFILE=prod
      --cache-from $CI_REGISTRY_IMAGE:LATEST
      --tag ${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG}:${CI_APPLICATION_TAG:-$CI_COMMIT_SHA}
      --tag ${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG}:latest
      .
    - docker push ${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG}:${CI_APPLICATION_TAG:-$CI_COMMIT_SHA}
    - docker push ${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG}:latest
  only:
    refs:
      - production
  interruptible: true

deploy-devel:
  image: gitlab.cleevio.cz:4567/backend/containers/kubectl-doctl-container:latest
  stage: deploy
  before_script:
    - doctl auth init --access-token=${DO_TOKEN}
  script:
    - doctl kubernetes cluster kubeconfig save cleevio-dev-2
    - kubectl get namespace "vexl-contact-ms-devel" || kubectl create namespace "vexl-contact-ms-devel"
    - kubectl config set-context --current --namespace=vexl-contact-ms-devel
    - kubectl apply -f .k8s/devel
    - kubectl set image deployments/appplication-deployment application=gitlab.cleevio.cz:4567/backend/vexl/vexl-contact-ms/devel:${CI_APPLICATION_TAG:-$CI_COMMIT_SHA}
  only:
    refs:
      - devel

deploy-staging:
  image: gitlab.cleevio.cz:4567/backend/containers/kubectl-doctl-container:latest
  stage: deploy
  before_script:
    - doctl auth init --access-token=${DO_TOKEN}
  script:
    - doctl kubernetes cluster kubeconfig save cleevio-dev-2
    - kubectl get namespace "vexl-contact-ms-staging" || kubectl create namespace "vexl-contact-ms-staging"
    - kubectl config set-context --current --namespace=vexl-contact-ms-staging
    - kubectl apply -f .k8s/stage
    - kubectl set image deployments/appplication-deployment application=gitlab.cleevio.cz:4567/backend/vexl/vexl-contact-ms/staging:${CI_APPLICATION_TAG:-$CI_COMMIT_SHA}
  only:
    refs:
      - staging